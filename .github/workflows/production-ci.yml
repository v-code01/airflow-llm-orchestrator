name: Production CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  release:
    types: [published]

env:
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "18"

jobs:
  # Stage 1: Code Quality and Security
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -e .

      - name: Run pre-commit hooks
        run: |
          pre-commit run --all-files --show-diff-on-failure

      - name: Security scan with Bandit
        run: |
          bandit -r airflow_llm/ -f json -o bandit-report.json
          bandit -r airflow_llm/ --severity-level medium

      - name: Dependency vulnerability scan
        run: |
          safety check --json --output safety-report.json
          safety check

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  # Stage 2: Testing Matrix
  test-matrix:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    needs: code-quality
    timeout-minutes: 30

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12"]
        exclude:
          # Reduce matrix size for efficiency
          - os: windows-latest
            python-version: "3.9"
          - os: macos-latest
            python-version: "3.9"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -e .

      - name: Run unit tests
        run: |
          pytest tests/ -v --cov=airflow_llm --cov-report=xml --cov-report=html

      - name: Run integration tests
        run: |
          pytest tests/integration/ -v --maxfail=3
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          PROPRIETARY_MODEL_API_KEY: ${{ secrets.PROPRIETARY_MODEL_API_KEY }}

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
          path: |
            htmlcov/
            coverage.xml
            pytest-report.xml

  # Stage 3: Performance Testing
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: test-matrix
    timeout-minutes: 45

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -e .
          pip install psutil

      - name: Run load tests
        run: |
          python tests/load_test.py
          python tests/stress_test.py

      - name: Upload performance reports
        uses: actions/upload-artifact@v3
        with:
          name: performance-reports
          path: |
            load_test_report_*.json
            stress_test_report_*.txt

  # Stage 4: Build and Package
  build-package:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [code-quality, test-matrix]
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: |
          python -m build

      - name: Check package
        run: |
          twine check dist/*

      - name: Upload package artifacts
        uses: actions/upload-artifact@v3
        with:
          name: python-package
          path: dist/

  # Stage 5: Docker Build
  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [code-quality, test-matrix]
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: airflowllm/airflow-llm-orchestrator
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Stage 6: Documentation
  documentation:
    name: Build Documentation
    runs-on: ubuntu-latest
    needs: code-quality
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install sphinx sphinx-rtd-theme

      - name: Build documentation
        run: |
          cd docs/
          make html

      - name: Upload documentation
        uses: actions/upload-artifact@v3
        with:
          name: documentation
          path: docs/_build/html/

  # Stage 7: Deployment (Production only)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [performance-tests, build-package, docker-build]
    if: github.event_name == 'release' && github.event.action == 'published'
    timeout-minutes: 30
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download package artifacts
        uses: actions/download-artifact@v3
        with:
          name: python-package
          path: dist/

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install deployment dependencies
        run: |
          python -m pip install --upgrade pip
          pip install twine

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          twine upload dist/*

      - name: Deploy to AWS EKS
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-west-2
        run: |
          aws eks update-kubeconfig --region $AWS_REGION --name airflow-llm-prod
          kubectl apply -f infra/kubernetes/
          kubectl rollout status deployment/airflow-llm-orchestrator

      - name: Notify deployment success
        uses: 8398a7/action-slack@v3
        if: success()
        with:
          status: success
          text: "üöÄ AirflowLLM ${{ github.event.release.tag_name }} deployed successfully!"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify deployment failure
        uses: 8398a7/action-slack@v3
        if: failure()
        with:
          status: failure
          text: "‚ùå AirflowLLM deployment failed!"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Stage 8: Production Health Check
  health-check:
    name: Production Health Check
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.event_name == 'release' && github.event.action == 'published'
    timeout-minutes: 10

    steps:
      - name: Wait for deployment
        run: sleep 60

      - name: Health check
        run: |
          curl -f https://api.airflow-llm.com/health || exit 1
          curl -f https://api.airflow-llm.com/version || exit 1

      - name: Run smoke tests
        run: |
          python -c "
          import requests

          # Test API endpoints
          health = requests.get('https://api.airflow-llm.com/health')
          assert health.status_code == 200

          version = requests.get('https://api.airflow-llm.com/version')
          assert version.status_code == 200

          print('‚úÖ All health checks passed')
          "

# Workflow notifications
notifications:
  name: Notifications
  runs-on: ubuntu-latest
  needs:
    [code-quality, test-matrix, performance-tests, build-package, docker-build]
  if: always()

  steps:
    - name: Notify on success
      if: ${{ needs.code-quality.result == 'success' && needs.test-matrix.result == 'success' }}
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: "‚úÖ AirflowLLM CI pipeline passed!"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Notify on failure
      if: ${{ needs.code-quality.result == 'failure' || needs.test-matrix.result == 'failure' }}
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: "‚ùå AirflowLLM CI pipeline failed!"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
